openapi: 3.0.3
info:
  description: Service Enabling Payments against OB Carrier Billing Systems
  version: '0.1.0'
  title: Carrier Billing API
  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/
security:
  - oAuth2ClientCredentials: []
  - BasicAuth: []
  - apiKey: []
  - three_legged:
    - simSwap-read
servers:
  - url: "{apiRoot}/{basePath}"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: payment/v0
        description: Base path for the carrier billing payment API
paths:
  /payments:
    post:
      tags:
      - payment
      summary: Create a new payment for subsequent charging to an end user’s bill
      operationId: createPayment
      parameters:
        - name: endUserId
          in: path
          description: Identifies the header that contains the external user token.
          required: true
          schema:
           type: string
      requestBody:
        description: Amount transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePayment'
        required: true
      responses:
        201:
          description: <b>Created</b>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePayment'
        400:
          description: 'List of error codes:<br/>- <b>SVC0001</b>: A service error
            occurred<br/>- <b>SVC0002</b>: Invalid input value for message part<br/>-
            <b>SVC0003</b>: Invalid input value for message part<br/>- <b>SVC0004</b>:
            No valid addresses provided for message part<br/>- <b>SVC0280</b>: Message
            too long'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyServiceRequestError'
        403:
          description: 'List of error codes:<br/>- <b>POL0001</b>: A policy error
            occurred<br/>- <b>POL0003</b>: Too many addresses specified in message
            part<br/>- <b>POL0007</b>: Nested groups specified in message part not
            allowed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyPolicyRequestError'
        404:
          description: 'List of error codes:<br/>- <b>POL0010</b>: Requested information
            unavailable as the retention time interval has expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyPolicyRequestError'
        406:
          description: 'List of error codes:<br/>- <b>POL0011</b>: Media type not
            supported'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyPolicyRequestError'
        503:
          description: 'List of error codes:<br/>- <b>SVC1000</b>: No resources This
            exception is thrown if there are no server resources available to process
            the request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyServiceRequestError'
    get: 
      tags:
      - payment
      summary: retrieve payment(s) for subsequent charging to an end user’s bill
      operationId: retrievePaymentList
      description: retrieve payements based on criteria filtering.
      parameters:
        - name: endUserId
          in: path
          description: Identifies the header that contains the external user token.
          required: true
          schema:
           type: string
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
            description: OK
            $ref: '#/components/responses/200PaymentArray'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value: 
                    code: INVALID_INPUT
                    message: "Schema validation failed at  ..."
                endUserIdRequired:
                  summary: end user id is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: endUserId"
                paymentIdRequired:
                  summary: paymentId is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: paymentId"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: CONFLICT
                message: "Another session is created for the same UE"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: INTERNAL
                message: "Session could not be created"
        503:
          $ref: "#/components/responses/Generic503"
  /payments/{paymentId}:
    get: 
      tags:
      - payment
      summary: retrieve a payment for subsequent charging to an end user’s bill
      operationId: retrievePayment
      description: retrieve payement formation for a given payment.
      parameters:
        - name: paymentId
          in: path
          description: Payment identifier that was obtained from the create payment operation
          required: true
          schema:
            type: string
        - name: endUserId
          in: path
          description: Identifies the header that contains the external user token.
          required: true
          schema:
           type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePayment'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value: 
                    code: INVALID_INPUT
                    message: "Schema validation failed at  ..."
                endUserIdRequired:
                  summary: end user id is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: endUserId"
                paymentIdRequired:
                  summary: paymentId is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: paymentId"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        404:
          $ref: "#/components/responses/Generic404"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
        503:
          $ref: "#/components/responses/Generic503"
  /payments/prepare:
    post:
      tags:
      - two-steps-payment
      summary: Prepare a new payment procedure for subsequent charging to an end user’s bill
      operationId: prepare
      parameters:
      - name: endUserId
        in: path
        description: Identifies the header that contains the external user token.
        required: true
        schema:
          type: string
      requestBody:
        description: Amount transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyAmountReservationTransactionForReserve'
        required: true
      responses:
        201:
          description: <b>Created</b>
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BodyAmountReservationTransactionForReserve'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value: 
                    code: INVALID_INPUT
                    message: "Schema validation failed at  ..."
                endUserIdRequired:
                  summary: end user id is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: endUserId"
                paymentIdRequired:
                  summary: paymentId is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: paymentId"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: CONFLICT
                message: "Another session is created for the same UE"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: INTERNAL
                message: "Session could not be created"
        503:
          $ref: "#/components/responses/Generic503"
  /payments/confirm/{paymentId}:
    post:
      tags:
      - two-steps-payment
      summary: Confirm or Cancel a reservation on the user’s mobile account
      operationId: confirmOrCancel
      parameters:
      - name: endUserId
        in: path
        description: Identifies the header that contains the external user token.
        required: true
        schema:
          type: string
      - name: paymentId
        in: path
        description: The transaction identifier returned when the reservation was
          created.
        required: true
        schema:
          type: string
      requestBody:
        description: Amount transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BodyAmountReservationTransactionForConfirmOrCancel'
        required: true
      responses:
        200:
          description: Payment confirmation accepted
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value: 
                    code: INVALID_INPUT
                    message: "Schema validation failed at  ..."
                endUserIdRequired:
                  summary: end user id is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: endUserId"
                paymentIdRequired:
                  summary: paymentId is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: paymentId"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: CONFLICT
                message: "Another session is created for the same UE"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: INTERNAL
                message: "Session could not be created"
        503:
          $ref: "#/components/responses/Generic503"
      x-codegen-request-body-name: body
  /payments/cancel/{paymentId}:
    post:
      tags:
      - two-steps-payment
      summary: Cancel a payment preparation on the user’s mobile account
      operationId: CancelPayment
      parameters:
      - name: endUserId
        in: path
        description: Identifies the user identifier
        required: true
        schema:
          type: string
      - name: paymentId
        in: path
        description: The payment identifier returned when the payment preparation was created.
        required: true
        schema:
          type: string
      responses:
        202:
          description: Payment Cancellation Accepted
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value: 
                    code: INVALID_INPUT
                    message: "Schema validation failed at  ..."
                endUserIdRequired:
                  summary: end user id is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: endUserId"
                paymentIdRequired:
                  summary: paymentId is required
                  value: 
                    code: INVALID_INPUT
                    message: "Expected property is missing: paymentId"
        401:
          $ref: "#/components/responses/Generic401"
        403:
          $ref: "#/components/responses/Generic403"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: CONFLICT
                message: "Another session is created for the same UE"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: INTERNAL
                message: "Session could not be created"
        503:
          $ref: "#/components/responses/Generic503"
      x-codegen-request-body-name: body
  /notifications:
    post:
      tags:
        - Purchase notifications callback
      summary: "Purchase notifications callback"
      description: |
        Important: this endpoint is to be implemented by the API consumer.
        The Checkout server will call this endpoint whenever any purchase related event occurs.
      operationId: purchaseNotification
      requestBody:
        description: Creates a new purchase Notification
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notification"
        required: true
      responses:
        "204":
          description: Successful notification
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
        "504":
          $ref: "#/components/responses/Generic504"
components:
  schemas:
    CreatePayment:
      required:
      - amountTransaction
      type: object
      properties:
        amountTransaction:
          $ref: '#/components/schemas/AmountTransaction'
    AmountTransaction:
      required:
      - endUserId
      - paymentAmount
      - referenceCode
      - transactionOperationStatus
      type: object
      properties:
        endUserId:
          type: string
          description: Identifies the header that contains the external user token.
        clientCorrelator:
          type: string
          description: Uniquely identifies this create charge request. If there is
            a communication failure during the charge request, using the same clientCorrelator
            when retrying the request allows the operator to avoid applying the same
            charge twice. This field SHOULD be present.
        paymentAmount:
          $ref: '#/components/schemas/PaymentAmountForCharge'
        referenceCode:
          type: string
          description: Merchant generated payment reference to uniquely identify the
            request, for example, in the case of disputes.
        transactionOperationStatus:
          type: string
          description: Specifies the payment operation required – in this case set
            to 'Charged'.
        resourceURL:
          type: string
          description: URI of the created resource (same as in the Location header)
        serverReferenceCode:
          type: string
          description: Reference to the charge or refund, provided by the server,
            and meaningful to the server’s backend system for the purpose of reconciliation.
    PaymentAmountForCharge:
      required:
      - chargingInformation
      type: object
      properties:
        chargingInformation:
          $ref: '#/components/schemas/ChargingInformation'
        chargingMetaData:
          $ref: '#/components/schemas/ChargingMetaData'
    BodyAmountReservationTransactionForReserve:
      required:
      - amountTransaction
      type: object
      properties:
        amountTransaction:
          $ref: '#/components/schemas/AmountReservationTransactionForReserve'
    AmountReservationTransactionForReserve:
      required:
      - endUserId
      - paymentAmount
      - referenceCode
      - transactionOperationStatus
      type: object
      properties:
        endUserId:
          type: string
          description: Identifies the header that contains the external user token.
        clientCorrelator:
          type: string
          description: Uniquely identifies this create charge request. If there is
            a communication failure during the charge request, using the same clientCorrelator
            when retrying the request allows the operator to avoid applying the same
            charge twice. This field SHOULD be present.
        paymentAmount:
          $ref: '#/components/schemas/PaymentAmountForReserve'
        referenceCode:
          type: string
          description: Merchant generated payment reference to uniquely identify the
            request, for example, in the case of disputes.
        transactionOperationStatus:
          type: string
          description: Specifies the payment operation required – in this case set
            to ‘Reserved’.
        resourceURL:
          type: string
          description: URI of the created resource (same as in the Location header)
        serverReferenceCode:
          type: string
          description: Reference to the charge or refund, provided by the server,
            and meaningful to the server’s backend system for the purpose of reconciliation.
    PaymentAmountForReserve:
      required:
      - chargingInformation
      type: object
      properties:
        chargingInformation:
          $ref: '#/components/schemas/ChargingInformation'
        chargingMetaData:
          $ref: '#/components/schemas/ChargingMetaData'
    BodyAmountReservationTransactionForConfirmOrCancel:
      required:
      - amountTransaction
      type: object
      properties:
        amountTransaction:
          $ref: '#/components/schemas/AmountReservationTransactionForConfirmOrCancel'
    BodyAmountReservationTransactionCancel:
      required:
      - amountTransaction
      type: object
      properties:
        amountTransaction:
          $ref: '#/components/schemas/AmountReservationTransactionForConfirmOrCancel'
    AmountReservationTransactionForConfirmOrCancel:
      required:
      - endUserId
      - transactionOperationStatus
      type: object
      properties:
        endUserId:
          type: string
          description: Identifies the header that contains the external user token.
        clientCorrelator:
          type: string
          description: Uniquely identifies this create charge request. If there is
            a communication failure during the charge request, using the same clientCorrelator
            when retrying the request allows the operator to avoid applying the same
            charge twice. This field SHOULD be present.
        paymentAmount:
          $ref: '#/components/schemas/PaymentAmountForConfirmOrCancel'
        referenceCode:
          type: string
          description: Merchant generated payment reference to uniquely identify the
            request, for example, in the case of disputes.
        transactionOperationStatus:
          type: string
          description: Specifies the payment operation required – in this case set
            to ‘Charged‘ (confirmation) or ‘Released‘ (cancelation).
        resourceURL:
          type: string
          description: URI of the created resource (same as in the Location header)
        serverReferenceCode:
          type: string
          description: Reference to the charge or refund, provided by the server,
            and meaningful to the server’s backend system for the purpose of reconciliation.
    PaymentAmountForConfirmOrCancel:
      required:
      - chargingInformation
      type: object
      properties:
        chargingInformation:
          $ref: '#/components/schemas/ChargingInformation'
        chargingMetaData:
          $ref: '#/components/schemas/ChargingMetaData'
        amountReserved:
          type: number
          description: Reserved amount.
        totalAmountCharged:
          type: number
          description: Total amout charged.
    ChargingInformation:
      required:
      - amount
      - currency
      - description
      type: object
      properties:
        amount:
          type: number
          description: Amount to be charged or reserved.
        currency:
          type: string
          description: Currency identifier as defined in [ISO4217].
        description:
          type: string
          description: Description text to be used for information and billing text
    ChargingMetaData:
      type: object
      properties:
        onBehalfOf:
          type: string
          description: Allows aggregators/partners to specify the actual payee.
        purchaseCategoryCode:
          type: string
          description: Indication of the content type.
        channel:
          type: string
          description: Billing policy
        taxAmount:
          type: number
          description: The tax amount charged by the merchant if the charge has tax
            already included. This also provides an indicator to the downstream billing
            system.
        serviceId:
          type: string
          description: Billing ID
        productId:
          type: string
          description: Product specification code
    BodyPolicyRequestError:
      required:
      - requestError
      type: object
      properties:
        requestError:
          $ref: '#/components/schemas/PolicyRequestError'
    PolicyRequestError:
      required:
      - policyException
      type: object
      properties:
        policyException:
          $ref: '#/components/schemas/Exception'
    BodyServiceRequestError:
      required:
      - requestError
      type: object
      properties:
        requestError:
          $ref: '#/components/schemas/ServiceRequestError'
    ServiceRequestError:
      required:
      - serviceException
      type: object
      properties:
        serviceException:
          $ref: '#/components/schemas/Exception'
    Exception:
      type: object
      properties:
        messageId:
          type: string
          description: identifier of the exception
        text:
          type: string
          description: text which describes the consistently of the exception
        variables:
          type: string
          description: relates to the %1 placeholder(s) in the text property
    ErrorInfo:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
    Notification:
      type: object
      description: Data type with attributes required for generating a Payment notification
      properties:
        paymentId:
          type: string
          description: Unique Identifier of the payment 
        action:
          type: string
          enum:
            - prepare_payment
            - confirm_payment
            - cancel_payment
          description: |
            Indication of the action notified by the event.
            * `prepare_payment`: Notification about preparePayment procedure
            * `confirm_payment`: Notification about confirmPayment procedure
            * `cancel_payment`: Notificacion about cancelPayment procedure
        status:
          type: string
          enum:
            - succeeded
            - failed
          description: | 
            Status of the procedure. Possible status are:
            * `succeeded`: procedure was accomplished 
            * `failed`: procedure failed.
            NOTE: Under reception of a notification with failed status, new purchase procedure shall be initiated by API Client, if required.
        description:
          type: string
          description: Description of the notification, both used when process was `succeeded` or `failed` indicating in the latter case human understable reason about why process failed.
      required:
        - paymentId
        - action
        - status
        - description
  responses:
    Generic400:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: INVALID_INPUT
            message: "Schema validation failed at  ..."
    Generic401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: UNAUTHORIZED
            message: "Authorization failed: ..."
    Generic403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: FORBIDDEN
            message: "Operation not allowed: ..."
    Generic404:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: NOT_FOUND
            message: "The specified resource is not found"
    Generic500:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: SERVER_ERROR
            message: "Server Error"
    Generic503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: SERVICE_UNAVAILABLE
            message: "Service unavailable"
    Generic504:
      description: Request timeout exceeded
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: REQUEST_TIMEOUT_EXCEEDED
            message: "Request timeout exceeded"
    200PaymentArray:
      description: A list of payment(s)
      headers:
        X-Total-Count:
          $ref: '#/components/headers/X-Total-Count'
        X-Result-Count:
          $ref: '#/components/headers/X-Result-Count'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AmountTransaction'
  parameters:
    Fields:
      name: fields
      in: query
      description: Comma-separated properties to be provided in response
      schema:
        type: string
    Offset:
      name: offset
      in: query
      description: Requested index for start of resources to be provided in response
      schema:
        type: integer
    Limit:
      name: limit
      in: query
      description: Requested number of resources to be provided in response
      schema:
        type: integer
  headers:
    X-Total-Count:
      description: Total number of items matching criteria
      schema:
        type: integer
    X-Result-Count:
      description: Actual number of items returned in the response body
      schema:
        type: integer
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: '{tokenUrl}'
          scopes: {}
    BasicAuth:
      type: http
      scheme: basic
    apiKey:
      type: apiKey
      description: API key to authorize requests
      name: apikey
      in: query
    three_legged:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/authorize
          tokenUrl: https://auth.example.com/token
          scopes:
            payment: perform payment